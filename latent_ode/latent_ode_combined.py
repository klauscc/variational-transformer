#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""spiral_odenet_mytest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sH2cz26nPKolxjquPKZaTSDZQtR2_oc9
"""
import os
import argparse
import logging
import time
import numpy as np
import numpy.random as npr
import matplotlib
import matplotlib.pyplot as plt
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
import pickle as pkl
import sys

parser = argparse.ArgumentParser()
parser.add_argument('--working_dir', type=str, default=None)
parser.add_argument('--train_dir', type=str, default=None)
parser.add_argument('--irregular', type=eval, default=False)
parser.add_argument('--noise_std', type=float, default=0.1)
parser.add_argument('--transformer', type=eval, default=False)
parser.add_argument('--adjoint', type=eval, default=False)
parser.add_argument('--visualize', type=eval, default=True)
parser.add_argument('--niters', type=int, default=2000)
parser.add_argument('--lr', type=float, default=0.01)
parser.add_argument('--gpu', type=int, default=0)

args = parser.parse_args()

#args.working_dir = '/home/nel/Code/class/variational-transformer'
#args.train_dir = '/home/nel/Code/class/variational-transformer/data/test2'

if args.adjoint:
    from torchdiffeq import odeint_adjoint as odeint
else:
    from torchdiffeq import odeint

sys.path.append(args.working_dir)
from latent_ode_trans.modules import TransformerLayer

print(args)

#%%
def generate_spiral2d(
        nspiral=1000,
        ntotal=500,
        nsample=100,
        start=0.,
        stop=1,    # approximately equal to 6pi
        noise_std=.1,
        a=0.,
        b=1.,
        irregular=False, 
        savefig=True,
        save_path="./spiral.pkl"):
    """Parametric formula for 2d spiral is `r = a + b * theta`.

    Args:
      nspiral: number of spirals, i.e. batch dimension
      ntotal: total number of datapoints per spiral
      nsample: number of sampled datapoints for model fitting per spiral
      start: spiral starting theta value
      stop: spiral ending theta value
      noise_std: observation noise standard deviation
      a, b: parameters of the Archimedean spiral
      irregular: False for evenly distributed timepoints
      savefig: plot the ground truth for sanity check

    Returns: 
      Tuple where first element is true trajectory of size (nspiral, ntotal, 2),
      second element is noisy observations of size (nspiral, nsample, 2),
      third element is timestamps of size (ntotal,),
      and fourth element is timestamps of size (nsample,)
    """
    #if os.path.isfile(save_path):
    #    return pkl.load(open(save_path, 'rb'))

    # add 1 all timestamps to avoid division by 0
    orig_ts = np.linspace(start, stop, num=ntotal)
    if irregular == True:
      samp_t = np.sort(npr.permutation(333)[:nsample])
      inward_t = np.linspace(-1, -100, 100).astype(np.int16) # inward
      outward_t = np.linspace(333, 432, 100).astype(np.int16) # ourward
      samp_ts = orig_ts[samp_t]
      inward_ts = - orig_ts[1:nsample + 1]
      outward_ts = orig_ts[outward_t] 
    else:    
      inward_t = np.linspace(-1, -100, 100).astype(np.int16) # inward
      samp_ts = orig_ts[:nsample]
      inward_ts = -orig_ts[1: nsample + 1]
      outward_ts = orig_ts[nsample: 2 * nsample]      
    
    # generate clock-wise and counter clock-wise spirals in observation space
    # with two sets of time-invariant latent dynamics
    zs_cw = stop + 1. - orig_ts
    rs_cw = a + b * 50. / zs_cw
    xs, ys = rs_cw * np.cos(zs_cw) - 5., rs_cw * np.sin(zs_cw)
    orig_traj_cw = np.stack((xs, ys), axis=1)

    zs_cc = orig_ts
    rw_cc = a + b * zs_cc
    xs, ys = rw_cc * np.cos(zs_cc) + 5., rw_cc * np.sin(zs_cc)
    orig_traj_cc = np.stack((xs, ys), axis=1)

    if savefig:
        plt.figure()
        plt.plot(orig_traj_cw[:, 0], orig_traj_cw[:, 1], label='clock')
        plt.plot(orig_traj_cc[:, 0], orig_traj_cc[:, 1], label='counter clock')
        plt.legend()
        plt.savefig('./ground_truth.png', dpi=500)
        print('Saved ground truth spiral at {}'.format('./ground_truth.png'))

    # sample starting timestamps
    orig_trajs = []
    samp_trajs = []
    samp_trajs_nonoise = []
    inward_trajs = []
    outward_trajs = []

    for _ in range(nspiral):
        cc = bool(npr.rand() > .5)    # uniformly select rotation
        orig_traj = orig_traj_cc if cc else orig_traj_cw
        orig_trajs.append(orig_traj)

        if irregular == True:
          t0_idx = npr.multinomial(1, [1. / (667 - 2*nsample)] * (667 - 2*nsample))
          t0_idx = np.argmax(t0_idx) + nsample
          #t0_idx = min(ntotal - 2 * nsample, t0_idx) + nsample
          #t0_idx = 666

          samp_traj = orig_traj[samp_t + t0_idx, :].copy() # samp_t - samp_t[0] + t0_idx
          samp_trajs_nonoise.append(samp_traj.copy())
          samp_traj += npr.randn(*samp_traj.shape) * noise_std
          samp_trajs.append(samp_traj)

          inward_traj = orig_traj[inward_t + t0_idx, :].copy()
          inward_trajs.append(inward_traj)

          outward_traj = orig_traj[outward_t + t0_idx, :].copy()
          outward_trajs.append(outward_traj)

        else:
          t0_idx = npr.multinomial(1, [1. / (ntotal - 2. * nsample)] * (ntotal - int(2 * nsample)))
          t0_idx = np.argmax(t0_idx) + nsample
          t0_idx = min(ntotal - 2 * nsample, t0_idx)

          samp_traj = orig_traj[t0_idx:t0_idx + nsample, :].copy()
          samp_trajs_nonoise.append(samp_traj.copy())
          samp_traj += npr.randn(*samp_traj.shape) * noise_std
          samp_trajs.append(samp_traj)

          inward_traj = orig_traj[inward_t + t0_idx, :].copy()
          inward_trajs.append(inward_traj)
          
          outward_traj = orig_traj[t0_idx + nsample:t0_idx + 2 * nsample, :].copy()
          outward_trajs.append(outward_traj)

    # batching for sample trajectories is good for RNN; batching for original
    # trajectories only for ease of indexing
    orig_trajs = np.stack(orig_trajs, axis=0)
    samp_trajs = np.stack(samp_trajs, axis=0)
    samp_trajs_nonoise = np.stack(samp_trajs_nonoise, axis=0)
    inward_trajs = np.stack(inward_trajs, axis=0)
    outward_trajs = np.stack(outward_trajs, axis=0)

    data = orig_trajs, samp_trajs, samp_trajs_nonoise, inward_trajs, outward_trajs, orig_ts, samp_ts, inward_ts, outward_ts
    pkl.dump(data, open(save_path, 'wb'))
    return data

class LatentODEfunc(nn.Module):
    
    def __init__(self, latent_dim=4, nhiiden=20):
        super(LatentODEfunc, self).__init__()
        self.elu = nn.ELU(inplace=True)
        self.fc1 = nn.Linear(latent_dim, nhidden)
        self.fc2 = nn.Linear(nhidden, nhidden)
        self.fc3 = nn.Linear(nhidden, latent_dim)
        self.nfe = 0
        
    def forward(self, t, x):
        self.nfe += 1
        out = self.fc1(x)
        out = self.elu(out)
        out = self.fc2(out)
        out = self.elu(out)
        out = self.fc3(out)
        return out
    
class RecognitionRNN(nn.Module):
    
    def __init__(self, latent_dim=4, obs_dim=2, nhidden=25, nbatch=1):
        super(RecognitionRNN, self).__init__()
        self.nhidden = nhidden
        self.nbatch = nbatch
        self.i2h = nn.Linear(obs_dim + nhidden, nhidden)
        self.h2o = nn.Linear(nhidden, latent_dim*2)
        
    def forward(self, x, h):
        combined = torch.cat((x,h), dim=1)
        h = torch.tanh(self.i2h(combined))
        out = self.h2o(h)
        return out, h
    
    def initHidden(self):
        return torch.zeros(self.nbatch, self.nhidden)
    
class Decoder(nn.Module):
    
    def __init__(self, latent_dim=4, obs_dim=2, nhidden=20):
        super(Decoder, self).__init__()
        self.relu = nn.ReLU(inplace=True)
        self.fc1 = nn.Linear(latent_dim, nhidden)
        self.fc2 = nn.Linear(nhidden, obs_dim)
        
    def forward(self, z):
        out = self.fc1(z)
        out = self.relu(out)
        out = self.fc2(out)
        return out

class RunningAverageMeter(object):
    """Computes and stores the average and current value"""

    def __init__(self, momentum=0.99):
        self.momentum = momentum
        self.reset()

    def reset(self):
        self.val = None
        self.avg = 0
        self.hist = []

    def update(self, val):
        if self.val is None:
            self.avg = val
        else:
            self.avg = self.avg * self.momentum + val * (1 - self.momentum)
        self.val = val
        self.hist.append(val)


def log_normal_pdf(x, mean, logvar):
    const = torch.from_numpy(np.array([2. * np.pi])).float().to(x.device)
    const = torch.log(const)
    return -.5 * (const + logvar + (x - mean) ** 2. / torch.exp(logvar))


def normal_kl(mu1, lv1, mu2, lv2):
    v1 = torch.exp(lv1)
    v2 = torch.exp(lv2)
    lstd1 = lv1 / 2.
    lstd2 = lv2 / 2.

    kl = lstd2 - lstd1 + ((v1 + (mu1 - mu2) ** 2.) / (2. * v2)) - .5
    return kl

#%%
if __name__ == '__main__':
    if not os.path.exists(args.train_dir):
        os.mkdir(args.train_dir)
    
    try:
        os.mkdir(os.path.join(args.train_dir, 'ode'))
        os.mkdir(os.path.join(args.train_dir, 'transformer'))
        print('Create folders')
    except:
        print('Folders already exist') 
    
    # generate toy spiral data
    nspiral = 1000
    start = 0
    stop = 6*np.pi
    noise_std = args.noise_std
    a = 0.
    b = .3
    ntotal = 1000
    nsample = 100
    irregular = args.irregular
    data_path = os.path.join(args.train_dir, 'spiral.pkl')
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    print(f'use cuda: {torch.cuda.is_available()}')
    
    if os.path.isfile(data_path):
        print('Data exist')
        data = pkl.load(open(data_path, 'rb'))
    else:
        print('Create data')
        data = generate_spiral2d(nspiral=nspiral, ntotal=ntotal,start=start, stop=stop, noise_std=noise_std, a=a, b=b, irregular=irregular, savefig=False, save_path=data_path)
    
    orig_trajs, samp_trajs, samp_trajs_nonoise, inward_trajs, outward_trajs, orig_ts, samp_ts, inward_ts, outward_ts = data
    #ii = np.random.randint(0, 100, 1)[0]; plt.figure(); plt.plot(orig_trajs[ii, :, 0], orig_trajs[ii, : , 1], label = 'ground truth spiral'); plt.plot(samp_trajs[ii, :, 0], samp_trajs[ii, : , 1], 'r.', label = 'sampled data')
    #plt.plot(samp_trajs_nonoise[ii, :, 0], samp_trajs_nonoise[ii, : , 1], 'y.', label = 'sampled data no noise');
    #plt.plot(inward_trajs[ii, :, 0], inward_trajs[ii, : , 1], 'g.', label = 'inward data'); plt.plot(outward_trajs[ii, :, 0], outward_trajs[ii, : , 1], 'g.', label = 'outward data')
    #plt.legend(); plt.show()
    
    fn_rmse = lambda x_pred, x_true: torch.mean(
        torch.sqrt(torch.sum((x_pred - x_true)**2, [1, 2]) / x_pred.size()[1]))

    orig_trajs = torch.from_numpy(orig_trajs).float().to(device)
    samp_trajs = torch.from_numpy(samp_trajs).float().to(device)
    samp_trajs_nonoise = torch.from_numpy(samp_trajs_nonoise).float().to(device)
    inward_trajs = torch.from_numpy(inward_trajs).float().to(device)
    outward_trajs = torch.from_numpy(outward_trajs).float().to(device)
    samp_ts = torch.from_numpy(samp_ts).float().to(device)
    inward_ts = torch.from_numpy(inward_ts).float().to(device)
    outward_ts = torch.from_numpy(outward_ts).float().to(device)
        
    # input parameters
    latent_dim = 2
    nhidden = 20
    rnn_nhidden = 25
    obs_dim = 2
    niters = args.niters
    print_iter = 20
    lr = 0.01
    itr = 0
    n_train = 800 # training spirals
    transformer = args.transformer
    
    if not transformer:
        save_path = os.path.join(args.train_dir, 'ode')
    else:
        save_path = os.path.join(args.train_dir, 'transformer')
        
    # model
    if not transformer:
        func = LatentODEfunc(latent_dim, nhidden).to(device)
        rec = RecognitionRNN(latent_dim, obs_dim, rnn_nhidden, n_train).to(device)
        dec = Decoder(latent_dim, obs_dim, nhidden).to(device)
        params = (list(func.parameters()) + list(dec.parameters()) + list(rec.parameters()))
        optimizer = optim.Adam(params, lr=lr)
    else:
        func = LatentODEfunc(latent_dim, nhidden).to(device)
        rec = TransformerLayer(latent_dim * 2, obs_dim, nhidden, dropout=0).to(device)
        dec = Decoder(latent_dim, obs_dim, nhidden).to(device)
        params = (list(func.parameters()) + list(dec.parameters()) + list(rec.parameters()))
        optimizer = optim.Adam(params, lr=lr)
        
    loss_meter = RunningAverageMeter()
    rmse_train = []
    rmse_train_inward = []
    rmse_valid = []
    rmse_test = []
  
    for itr in range(itr+1, niters + itr + 1):
        optimizer.zero_grad()    
        if not transformer:
            # backward in time to infer q(z_0)
            h = rec.initHidden().to(device)
            for t in reversed(range(samp_trajs.size(1))):
                obs = samp_trajs[:n_train, t, :]
                out, h = rec.forward(obs, h)
            qz0_mean, qz0_logvar = out[:, :latent_dim], out[:, latent_dim:]
        else:
            rec.train()
            dec.train()
            # backward in time to infer q(z_0)
            out = rec.forward(samp_trajs[:n_train], samp_ts)    # (bs, nsample, latent_dim*2)
            qz0_mean, qz0_logvar = out[:, 0, :latent_dim], out[:, 0, latent_dim:]
        epsilon = torch.randn(qz0_mean.size()).to(device)
        z0 = epsilon * torch.exp(.5 * qz0_logvar) + qz0_mean
    
        # forward in time and solve ode for reconstructions
        pred_z = odeint(func, z0, samp_ts).permute(1, 0, 2)
        pred_x = dec(pred_z)
    
        # compute loss
        noise_std_ = torch.zeros(pred_x.size()).to(device) + noise_std
        noise_logvar = 2. * torch.log(noise_std_).to(device)
        logpx = log_normal_pdf(samp_trajs[:n_train], pred_x, noise_logvar).sum(-1).sum(-1)
        pz0_mean = pz0_logvar = torch.zeros(z0.size()).to(device)
        analytic_kl = normal_kl(qz0_mean, qz0_logvar, pz0_mean, pz0_logvar).sum(-1)
        loss = torch.mean(-logpx + analytic_kl, dim=0)
        loss.backward()
        optimizer.step()
        loss_meter.update(loss.item())
    
        with torch.no_grad():
            train_rmse = fn_rmse(pred_x, samp_trajs_nonoise[:n_train])
            train_rmse = train_rmse.item()
            rmse_train.append([itr, train_rmse])            
          
        if (itr % print_iter) == 0:
            test_z = odeint(func, z0, inward_ts).permute(1, 0, 2)    # (bs, nsample+1, nc)
            test_x = dec(test_z[:, :, :])    # (bs, nsample, nc)
            train_rmse_inwards = fn_rmse(test_x, inward_trajs[:n_train]).item()
            rmse_train_inward.append([itr, train_rmse_inwards])
            
            if not transformer:
                # backward in time to infer q(z_0)
                h = rec.initHidden().to(device)
                for t in reversed(range(samp_trajs.size(1))):
                    obs = samp_trajs[-n_train:, t, :]
                    out, h = rec.forward(obs, h)
                qz0_mean, qz0_logvar = out[:, :latent_dim], out[:, latent_dim:]
            else:
                rec.eval()
                dec.eval()
                # backward in time to infer q(z_0)
                out = rec.forward(samp_trajs[-n_train:], samp_ts)    # (bs, nsample, latent_dim*2)
                qz0_mean, qz0_logvar = out[:, 0, :latent_dim], out[:, 0, latent_dim:]
            epsilon = torch.randn(qz0_mean.size()).to(device)
            z0 = epsilon * torch.exp(.5 * qz0_logvar) + qz0_mean
        
            # forward in time and solve ode for reconstructions
            valid_z = odeint(func, z0, inward_ts).permute(1, 0, 2)
            valid_x = dec(valid_z)

            valid_rmse = fn_rmse(valid_x[-200:-100, :, :], inward_trajs[-200:-100, :, :])
            valid_rmse = valid_rmse.item()
            test_rmse = fn_rmse(valid_x[-100:, :, :], inward_trajs[-100:, :, :])
            test_rmse = test_rmse.item()
            rmse_valid.append([itr, valid_rmse])
            rmse_test.append([itr, test_rmse])
            
            print('Iter: {}, running avg elbo: {:.4f}. train_rmse: {:.4f}. train_rmse_inward: {:.4f}.  rmse_valid: {:.4f}. rmse_test: {:.4f}'.format(itr, -loss_meter.avg, train_rmse, train_rmse_inwards, valid_rmse, test_rmse))
            #print(f'Learning rate {optimizer.param_groups[0]["lr"]}')
            #print('Iter: {:4d}, running elbo: {:.4f}'.format(itr, -loss_meter.val))
     
        if (itr % 1000) == 0:
            # saving the loss and parameters
            ckpt_path = os.path.join(save_path, f'ckpt_{itr}.pth')
            torch.save({
                'func_state_dict': func.state_dict(),
                'rec_state_dict': rec.state_dict(),
                'dec_state_dict': dec.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'orig_trajs': orig_trajs,
                'samp_trajs': samp_trajs,
                'orig_ts': orig_ts,
                'samp_ts': samp_ts,
                'inward_ts': inward_ts,
                'outward_ts': outward_ts,
                'loss_hist': loss_meter.hist,
                'rmse_train':rmse_train,
                'rmse_train_inward':rmse_train_inward,
                'rmse_valid':rmse_valid,
                'rmse_test':rmse_test
                }, ckpt_path)
            
            plt.figure(figsize=(25,20))
            a = 700
            i_range = [a, a+6]
            for idx in range(1, 7):
              with torch.no_grad():
                if not transformer:
                    # sample from trajectorys' approx. posterior
                    h = rec.initHidden().to(device)
                    for t in reversed(range(samp_trajs.size(1))):
                        obs = samp_trajs[-n_train:, t, :]
                        out, h = rec.forward(obs, h)
                    qz0_mean, qz0_logvar = out[:, :latent_dim], out[:, latent_dim:]
                else:
                    rec.eval()
                    dec.eval()
                    out = rec.forward(samp_trajs[-n_train:], samp_ts)    # (bs, nsample, latent_dim*2)
                    qz0_mean, qz0_logvar = out[:, 0, :latent_dim], out[:, 0, latent_dim:]
                epsilon = torch.randn(qz0_mean.size()).to(device)
                z0 = epsilon * torch.exp(.5 * qz0_logvar) + qz0_mean
            
                # take first trajectory for visualization
                i = idx + a
                z0 = z0[i]
            
                ts_pos = np.linspace(0., 4. * np.pi, num=1000)
                ts_neg = np.linspace(-2*np.pi, 0., num=1000)[::-1].copy()
                ts_pos = torch.from_numpy(ts_pos).float().to(device)
                ts_neg = torch.from_numpy(ts_neg).float().to(device)
            
                zs_pos = odeint(func, z0, ts_pos)
                zs_neg = odeint(func, z0, ts_neg)
            
                xs_pos = dec(zs_pos)
                xs_neg = torch.flip(dec(zs_neg), dims=[0])
            
              xs_pos = xs_pos.cpu().numpy()
              xs_neg = xs_neg.cpu().numpy()
              orig_traj = orig_trajs[-n_train+i].cpu().numpy()
              samp_traj = samp_trajs[-n_train+i].cpu().numpy()
            
              plt.subplot(2, 3, idx)
              plt.plot(orig_traj[:, 0], orig_traj[:, 1],
                      'g', label='true trajectory')
              plt.plot(xs_pos[:, 0], xs_pos[:, 1], 'r',
                      label='learned trajectory (t>0)')
              plt.plot(xs_neg[:, 0], xs_neg[:, 1], 'b',
                      label='learned trajectory (t<0)')
              plt.scatter(samp_traj[:, 0], samp_traj[
                          :, 1], label='sampled data', s=3)
              plt.legend(loc='upper right')
            plt.savefig(os.path.join(save_path, f'{itr}_iterations_{i_range}'))